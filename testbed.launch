<?xml version="1.0"?>
<launch>

  	<arg name="mav_name" default="hummingbird_with_cam"/>
  	<arg name="world_name" default="basic"/>
  	<arg name="enable_logging" default="false" />
  	<arg name="enable_ground_truth" default="true" />
  	<arg name="log_file" default="$(arg mav_name)" />
  	<arg name="debug" default="false"/>
  	<arg name="gui" default="true"/>
  	<arg name="paused" default="true"/>
  	<arg name="verbose" default="false"/>


  	<env name="GAZEBO_MODEL_PATH" value="$(find kamagami)/models:$(find rotors_gazebo)/models"/>


  	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  	<include file="$(find gazebo_ros)/launch/empty_world.launch">
    		<arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    		<arg name="debug" value="$(arg debug)" />
    		<arg name="paused" value="$(arg paused)" />
    		<arg name="gui" value="$(arg gui)" />
    		<arg name="verbose" value="$(arg verbose)"/>
  	</include>

  	<group ns="$(arg mav_name)">

    		<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      			<arg name="mav_name" value="$(arg mav_name)" />
      			<arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      			<arg name="enable_logging" value="$(arg enable_logging)" />
      			<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      			<arg name="log_file" value="$(arg log_file)"/>
    		</include>

    		<node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      			<rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      			<rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      			<remap from="odometry" to="odometry_sensor1/odometry" />
    		</node>

    		<node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>

    		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    		<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  	</group>

	<group ns="robot1">
		<param name="tf_prefix" value="robot1_tf"/>
		<include file="$(find kamagami)/launch/kamagami.launch">
			<arg name="name" value="bot1"/>
			<arg name="x" value="-0.25"/>
			<arg name="y" value="0.25"/>
			<arg name="yaw" value="0"/>
			<arg name="real" value="false"/>
  			<arg name="tag" value="tag0"/>
		</include>
	</group>

	<group ns="robot2">
		<param name="tf_prefix" value="robot2_tf"/>
		<include file="$(find kamagami)/launch/kamagami.launch">
			<arg name="name" value="bot2"/>
			<arg name="x" value="-0.25"/>
			<arg name="y" value="0"/>
			<arg name="yaw" value="0"/>
			<arg name="real" value="false"/>
  			<arg name="tag" value="tag1"/>
		</include>
	</group>

	<group ns="robot3">
		<param name="tf_prefix" value="robot3_tf"/>
		<include file="$(find kamagami)/launch/kamagami.launch">
			<arg name="name" value="bot3"/>
			<arg name="x" value="0.25"/>
			<arg name="y" value="-0.25"/>
			<arg name="yaw" value="0"/>
			<arg name="real" value="false"/>
  			<arg name="tag" value="tag2"/>
		</include>
	</group>
<!--
	<group ns="robot4">
		<param name="tf_prefix" value="robot4_tf"/>
		<include file="$(find kamagami)/launch/kamagami.launch">
			<arg name="name" value="bot4"/>
			<arg name="x" value="0.25"/>
			<arg name="y" value="0.25"/>
			<arg name="yaw" value="1.57"/>
			<arg name="real" value="false"/>
  			<arg name="tag" value="tag3"/>
		</include>
	</group>

	<group ns="robot5">
		<param name="tf_prefix" value="robot5_tf"/>
		<include file="$(find kamagami)/launch/kamagami.launch">
			<arg name="name" value="bot5"/>
			<arg name="x" value="0"/>
			<arg name="y" value="0.5"/>
			<arg name="yaw" value="1.57"/>
			<arg name="real" value="false"/>
  			<arg name="tag" value="tag4"/>
		</include>
	</group>
-->
	<include file="$(find apriltags_ros)/launch/april_tags.launch">
        	<arg name="parent" value="hummingbird_with_cam"/>
	</include>

	<!--Leader Node-->
	<!--<node pkg="formation_control" type="leader_node" name="circle" output="screen"/>-->

	<node pkg="formation_control" type="leader_node" name="circle">
        	<param name="follower" value="/robot1_tf/base_link" />
	</node>

	<!--Follower Node-->
	<node pkg="formation_control" type="follower_node" name="follower_1" >
        	<param name="follower" value="/robot2_tf/base_link" />
        	<param name="robot_name" value="robot2" />
	</node>

	<node pkg="formation_control" type="follower_node" name="follower_2" output="screen">
        	<param name="follower" value="/robot3_tf/base_link" />
        	<param name="robot_name" value="robot3" />
	</node>



	<!--Operator Nodes-->
	<node pkg="formation_control" type="operator_node" name="operator_1" >
		<param name="leader" value="/world" />
        	<param name="follower" value="/robot1_tf/base_link" />
	</node>

	<node pkg="formation_control" type="operator_node" name="operator_2" >
		<param name="leader" value="/robot1_tf/base_link" />
        	<param name="follower" value="/robot2_tf/base_link" />
	</node>

	<node pkg="formation_control" type="operator_node" name="operator_3" >
		<param name="leader" value="/robot2_tf/base_link" />
        	<param name="follower" value="/robot3_tf/base_link" />
	</node>

</launch>
